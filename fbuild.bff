.VSVersion = '14.29.29917'
.VSEdition = 'Preview'
.WindowsSDKVersion = '10.0.18362.0'
.VSBinPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\$VSEdition$\VC\Tools\MSVC\$VSVersion$\bin\Hostx64\x64'
.VSLLVMPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\$VSEdition$\VC\Tools\Llvm\x64\bin'
.VSIncludePath = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\$VSEdition$\VC\Tools\MSVC\$VSVersion$\include'
.VSInstallPath = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\$VSEdition$'
.VSLibPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\$VSEdition$\VC\Tools\MSVC\$VSVersion$\lib\x64'
.WindowsSDKBasePath = 'C:\Program Files (x86)\Windows Kits\10'
.WindowsSDKIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\$WindowsSDKVersion$\um'
.WindowsSDKLibPath_x64 = 'C:\Program Files (x86)\Windows Kits\10\Lib\$WindowsSDKVersion$\um\x64'
.WindowsSDKSharedIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\$WindowsSDKVersion$\shared'
.WindowsSDKUcrtIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\$WindowsSDKVersion$\ucrt'
.WindowsSDKUcrtLibPath_x64 = 'C:\Program Files (x86)\Windows Kits\10\Lib\$WindowsSDKVersion$\ucrt\x64'

Compiler('Compiler-Clang') {
    .Executable = '$VSLLVMPath_x64$\clang-cl.exe'
}

.projectBaseConfig = [
    .projectName = 'smokylab'

    .inputPath = {'src', 'dep'}
    .cFilePatterns = {'*.c'}
    .cppFilePatterns = {'*.cpp'}
]

.clangBaseConfig = [
    Using(.projectBaseConfig)

    .compiler = 'Compiler-Clang'
    .linker = '$VSLLVMPath_x64$\lld-link.exe'
    .compilerOptions = ' -o "%2" "%1" -c -Wall -Wextra -Wno-unknown-pragmas -Wno-vla -Wno-switch-enum -Wno-double-promotion -Wno-language-extension-token -Wno-implicit-fallthrough -Wno-undef -Wno-reserved-id-macro -Wno-shorten-64-to-32 -Wno-sign-conversion -Wno-missing-prototypes -Wno-#pragma-messages -Wno-newline-eof -Wno-c++98-compat-pedantic -fdiagnostics-absolute-paths -DDEBUG -DINSIGHT_ENABLE_VALIDATION_LAYER'

    .cCompilerFlags = ' '
    .cppCompilerFlags = ' '
]


.clangWindowsConfig = [
    Using(.clangBaseConfig)
    .compilerOptions + ' -Z7 -Od -D_CRT_SECURE_NO_WARNINGS' +
    ' -I"$VSIncludePath$" -I"$WindowsSDKIncludePath$" -I"$WindowsSDKSharedIncludePath$" -I"$WindowsSDKUcrtIncludePath$" -I"dep" -DINSIGHT_WINDOWS -DVK_USE_PLATFORM_WIN32_KHR' +
    ' -Wno-implicit-int-float-conversion -Wno-zero-length-array -Wno-microsoft-flexible-array -Wno-flexible-array-extensions -Wno-float-conversion -Wno-macro-redefined -Wno-c99-extensions -Wno-old-style-cast -Wno-zero-as-null-pointer-constant -Wno-deprecated-dynamic-exception-spec -Wno-nested-anon-types -Wno-pragma-pack -Wno-gnu-anonymous-struct -Wno-gnu-folding-constant -Wno-redundant-parens -Wno-bad-function-cast -Wno-ignored-attributes -Wno-ignored-pragma-intrinsic -Wno-dollar-in-identifier-extension -Wno-extra-semi-stmt -Wno-cast-qual -Wno-strict-prototypes -Wno-expansion-to-defined -Wno-microsoft-enum-value -Wno-extra-semi -Wno-microsoft-anon-tag -Wno-nonportable-include-path -Wno-nonportable-system-include-path'
    .cCompilerFlags + ' -TC'
    .cppCompilerFlags + ' -TP -std:c++17'
    .linkerOptions = ' "%1" -OUT:"%2" -SUBSYSTEM:CONSOLE -DEBUG -LIBPATH:"$VSLibPath_x64$" -LIBPATH:"$WindowsSDKLibPath_x64$" -LIBPATH:"$WindowsSDKUcrtLibPath_x64$" -LIBPATH:"dep\SDL2" gdi32.lib Shell32.lib SDL2.lib SDL2main.lib'
]


.projectConfigs = {
    .clangWindowsConfig,
}


ForEach(.projectConfig in .projectConfigs) {
    Using(.projectConfig)

    ObjectList('Obj-$projectName$-C') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions + .cCompilerFlags
        .CompilerInputPath = .inputPath
        .CompilerInputPattern = .cFilePatterns
        .CompilerOutputPath = 'tmp'
    }

    ObjectList('Obj-$projectName$-Cpp') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions + .cppCompilerFlags
        .CompilerInputPath = .inputPath
        .CompilerInputPattern = .cppFilePatterns
        .CompilerOutputPath = 'tmp'
    }

    Copy('$projectName$-CopyDLL')
    {
        .Source = 'dep\SDL2\SDL2.dll'
        .Dest = 'bin\SDL2.dll'
    }

    Executable('Exe-$projectName$') {
        .Linker = .linker
        .LinkerOutput = 'bin/$projectName$.exe'
        .PreBuildDependencies = {
            '$projectName$-CopyDLL'
        }
        .LinkerOptions = .linkerOptions
        .Libraries = {
            'Obj-$projectName$-C',
            'Obj-$projectName$-Cpp'
        }
    }
}
